{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","backgroundColor","color","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","trim","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a66c0080.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\"> */}\r\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n          {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n        {/* </li> */}\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" style={{backgroundColor: props.mode==='black'?'black':'white', color: props.mode==='black'?'white':'black'}} placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n      <div className={`form-check form-switch text-${props.mode==='white'?'black':'white'} mx-3`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='black'?'Enable Light Mode':'Enable Dark Mode'}</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\n// isRequired says we need title either pass it or set default values, if both are not available then it will give error\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log('Uppercase was clicked' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n    const handleLowClick = ()=>{\r\n        // console.log('Uppercase was clicked' + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Cleared the text area\", \"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log('On Change');\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    // text = \"new Text\": is a wrong way to change the state\r\n    // setText(\"Hello I am new here\"); // correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='black'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">  \r\n  <textarea className=\"form-control\" placeholder=\"Enter text or paste\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='black'?'black':'white', color: props.mode==='black'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n{/* <div className=\"container my-3\"> */}\r\n<div className=\"container my-3\" style={{color: props.mode==='black'?'white':'black'}}>\r\n    <h1>Your text summary</h1>\r\n    <p>{text.trim().split(\"\").length} words and {text.length} characters</p>\r\n    <p>{0.008 * text.split(\" \").length}Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n</div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react'\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('white');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000);\n  }\n  \n  // whether dark mode is enabled or not\n  const toggleMode = ()=>{\n    if(mode==='white'){\n      setMode('black');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"dark\"\n    }\n    else{\n      setMode('white')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"light\"\n    }\n  }\n  return (\n    // this is JSX which is a HTML file with JS\n    // <> \n/* The above line is JSX fragment */\n    // </>\n   \n   <> \n{/* <Router> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n<div className=\"container my-3\">\n      {/* <Switch> */}\n        {/* /users --> Component1 */}\n        {/* /users/home --> Component2 */}\n          {/* <Route exact path=\"/about\"> */}\n              {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n      {/* </Switch> */}\n</div>\n      {/* </Router> */}\n</>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// this entry code says, put the app inside the div element. strict mode is just JS is a forgiving language so it may forgive your errors which we don't want to keep the clean code, hence we use strict mode\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}